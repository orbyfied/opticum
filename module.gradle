/*
    Generated Sources
 */

sourceSets {
    main {
        java {
            String grd = "${buildDir}/generated/main/java"
            project.ext.generatedResDir = grd
            srcDir(grd)
        }
    }
}

def fileMake(File f) {
    if (!f.exists()) {
        f.getParentFile().mkdirs();
        f.createNewFile();
    }
}

def callPyGenSourceFile(File file) {
    // create process builder with correct command and work directory
    ProcessBuilder b = new ProcessBuilder("py ", file.getName());
    b.directory(file.getParentFile())

    // set result directory
    Map<String, String> env = b.environment();
    env.put("RESULT_DIR", (String)project.ext.generatedResDir);

    // create log files
    File logDir = new File(buildDir, "/genlog/");
    String lfs  = file.toString().replace("\\", "_").replace("/", "_") + "+.txt";
    File out = new File(logDir, lfs.replace("+", "+out"));
    File err = new File(logDir, lfs.replace("+", "+err"));
    fileMake(out);
    fileMake(err);
    // redirect streams
    b.redirectOutput(out)
    b.redirectError(err)

    // start process
    Process p = b.start();
    int r = p.waitFor()

    // check return code
    if (r != 0) {
        throw new IllegalStateException((String)("Code generation failed, script: '" + file.getName() + "'\n" +
                "   Exit code: " + r + ", error log file: " + err.getAbsolutePath()));
    }
}

task("generate") {
    group 'build'
    doLast {
        // for all generation files
        File dir = new File("src/main/generated/");
        for (File file1 : dir.listFiles()) {
            if (!file1.name.endsWith(".py") || file1.name.startsWith("_"))
                continue;
            callPyGenSourceFile(file1);
        }
    }
}